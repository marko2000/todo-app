{"version":3,"sources":["Components/Form.jsx","Components/Item.jsx","Components/List.jsx","hooks/UseLocalStorage.jsx","App.js","index.js"],"names":["Form","filter","setFilter","setFilteredItems","input","todos","setTodos","setInput","useEffect","handleFilter","handleNewTodo","e","preventDefault","todoInfo","done","id","nextId","importance","alert","ev","el","className","value","onChange","target","type","placeholder","onKeyPress","keyCode","which","onClick","name","Item","info","todo","map","elem","List","filteredItems","useLocalStorage","record","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","dataToStore","setItem","stringify","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c910be35.chunk.js","sourcesContent":["import React, { Component, useEffect } from 'react';\r\n// instaliran dodatan paket za generisanje id-jeva, i preko f-je nextId() generisemo novi id\r\nimport nextId from \"react-id-generator\";\r\n\r\nconst Form = ({ filter, setFilter, setFilteredItems, input, todos, setTodos, setInput }) => {\r\n\r\n    useEffect(() => {\r\n        handleFilter();\r\n    }, [filter, todos])\r\n\r\n    const inputHandler = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleNewTodo = (e) => {\r\n        e.preventDefault();\r\n        setInput(input);\r\n        input !== \"\"\r\n            ? setTodos([...todos, { todoInfo: input, done: false, id: nextId(), importance: \"standard\" }])\r\n            : alert(\"Ne može se napraviti todo od praznog unosa\");\r\n        // sad praznimo polje za unos\r\n        setInput(\"\");\r\n    }\r\n\r\n    const handleFilter = (ev) => {\r\n        switch (filter) {\r\n            case \"done\":\r\n                setFilteredItems(todos.filter(el => el.done));\r\n                break;\r\n            case \"undone\":\r\n                setFilteredItems(todos.filter(el => !el.done));\r\n                break;\r\n            default:\r\n                setFilteredItems(todos);\r\n                break;\r\n        }\r\n    }\r\n\r\n    const handleChangeFilter = (ev) => {\r\n        setFilter(ev.target.value);\r\n    }\r\n    const enterPressed = (ev) => {\r\n        let code = ev.keyCode || ev.which;\r\n        if (code === 13) handleNewTodo();\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <div className=\"form-container\">\r\n                <div className=\"form-container1\">\r\n                    {/* dodavanjem value={input} mi obezbedjujemo da kad god se stanje inputa promeni\r\n            nakon ponovnog renderovanja value bude jednako inputu koji smo setovali na \"\" */}\r\n                    <input value={input} onChange={inputHandler} type=\"text\" className=\"todo-input\" placeholder=\"Unesite Vaš zadatak:\" />\r\n                    <button onKeyPress={enterPressed} onClick={handleNewTodo} className=\"todo-button\" type=\"submit\">\r\n                        {/* ovo menjamo kasnije */}\r\n                        <i className=\"fas fa-plus\"></i>\r\n                    </button>\r\n                </div>\r\n                <div className=\"form-container2\">\r\n                    <div className=\"select\">\r\n                        <select onChange={handleChangeFilter} name=\"todos\" className=\"filter-todo\">\r\n                            <option value=\"all\">Svi</option>\r\n                            <option value=\"done\">Završeni</option>\r\n                            <option value=\"undone\">Nezavršeni</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","// import React, { Component } from 'react';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst Item = ({ info, todo, todos, setTodos }) => {\r\n\r\n    const handleDelete = () => {\r\n        setTodos(todos.filter((elem) => elem.id !== todo.id))\r\n    }\r\n\r\n    const handleToggleStatus = () => {\r\n        // ovde treba da odradimo dodavanje i uklanjanje klase\r\n        // ta klasa treba da precrta odredjenu todo stavku\r\n        setTodos(todos.map(el => {\r\n            if (el.id === todo.id) {\r\n                return {\r\n                    // ovo je destrukturisanje objekta prvo, i onda menjamo jedan property\r\n                    ...el, done: !el.done\r\n                    // trebalo bi kad se promeni ovaj atribut na osnovu toga da povlaci odgovarajucu klasu iz css\r\n                }\r\n            }\r\n            return el;\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div className=\"item\">\r\n            <span className={`${todo.done ? \"done\" : \"\"}`}>{info}</span>\r\n            <div className=\"confirmed\">\r\n                <button onClick={handleToggleStatus} className=\"btn-check\"><i className=\"fas fa-check\"></i></button>\r\n                <button onClick={handleDelete} className=\"btn-delete\"><i className=\"fas fa-trash-alt\"></i></button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport Item from './Item.jsx'\r\n\r\nconst List = ({filteredItems, todos, setTodos}) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filteredItems.map((todo) => <Item \r\n                todo={todo} \r\n                key={todo.id} \r\n                info={todo.todoInfo} \r\n                todos={todos} \r\n                setTodos={setTodos}/>)}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default List;","import { useState } from 'react';\r\n\r\nconst useLocalStorage = (record, initialValue) => {\r\n    // Nova kuka (hook) čiji je zadatak da iz localStorage-a povuče podatke \r\n    // Definisanje početnog stanja\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n        try {\r\n            // Nalaženje stavke iz localStorage-a po zapisu record\r\n            const item = window.localStorage.getItem(record);\r\n            // Ukoliko postoje u memoriji podaci, oni će biti postavljeni kao početno stanje, u suprotnom \r\n            // postavljamo prosleđenu početnu vrednost\r\n            return item ? JSON.parse(item) : initialValue;\r\n        } catch (error) {\r\n            // I kada se desi greška takođe vraćamo prosleđenu početnu vrednost\r\n            console.log(error);\r\n            return initialValue;\r\n        }\r\n    })\r\n\r\n    // definisanje funkcije koja menja vrednost\r\n    const setValue = value => {\r\n        try {\r\n            // kada se funkciji za update stanja prosledi vrednost value, tu vrednost želimo i da skladištimo\r\n            const dataToStore = value;\r\n            setStoredValue(dataToStore);\r\n            window.localStorage.setItem(record, JSON.stringify(dataToStore));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    // na kraju treba vratiti stanje i funkciju za promenu stanja\r\n    return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;","import React, { Component, useState, useEffect } from 'react';\nimport Form from \"./Components/Form.jsx\";\nimport List from \"./Components/List.jsx\";\nimport useLocalStorage from \"./hooks/UseLocalStorage.jsx\"\nimport \"./App.css\";\n\n\nconst App = () => {\n\n    // Stanja sa useState\n    const [input, setInput] = useState(\"\");\n    // const [todos, setTodos] = useState([]);\n    const [todos, setTodos] = useLocalStorage(\"todos\", []);\n    const [filter, setFilter] = useState([\"all\"]);\n    const [filteredItems, setFilteredItems] = useState([todos]);\n\n    return (<div>\n        <h4 > Todo Aplikacija </h4>\n        <Form filteredItems={filteredItems}\n            setFilteredItems={setFilteredItems}\n            filter={filter}\n            setFilter={setFilter}\n            input={input}\n            setTodos={setTodos}\n            todos={todos}\n            setInput={setInput}\n        />\n        <List filteredItems={filteredItems}\n            setFilteredItems={setFilteredItems}\n            todos={todos}\n            setTodos={setTodos}\n        />\n    </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}